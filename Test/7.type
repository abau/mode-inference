data Bool = False | True
;
data List a = Nil | Cons a self
;
main[List Bool -> Bool] xs[List Bool] = 
  and[List Bool -> Bool] ( Cons[Bool -> List Bool -> List Bool] True[Bool] xs[List Bool] )
;
and[List Bool -> Bool] xs[List Bool] = case xs[List Bool] of {
  Nil -> True[Bool] ;
  Cons y[Bool] ys[List Bool] -> 
    let rest[Bool] = and[List Bool -> Bool] ys[List Bool] 
    in
      and2 [Bool -> Bool -> Bool] y[Bool] rest[Bool]
} 
;
and2[Bool -> Bool -> Bool] x[Bool] y[Bool] = case x[Bool] of {
  False -> False[Bool] ;
  True  -> y[Bool]
}
